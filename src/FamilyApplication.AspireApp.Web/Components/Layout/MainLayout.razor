@using BlazorServerCommon.Login
@using BlazorServerCommon.Vm
@using FamilyApplication.AspireApp.Web.Components.Users
@using FamilyApplication.AspireApp.Web.CosmosDb.User
@using FamilyApplication.AspireApp.Web.Databuffer
@using FamilyApplication.AspireApp.Web.Notifications
@using FamilyApplication.AspireApp.Web.Sessions
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject GlobalVm GlobalVm
@inject Users.UserNotificationManager UserNotificationManager
@inject SessionManager SessionManager
@inject IDialogService DialogService
@implements IDisposable



<AuthorizeView>
	<Authorized>
		<FluentLayout>
			<FluentHeader>
				<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
					AppiSnappi
					<FluentSpacer />
                    @* <NotificationRequester/> *@
					<RunningTaskAndErrorFooterContent />
					<SessionViewer />
					<FluentCounterBadge Count="@UserNotificationManager.UnreadCount"
										ShowWhen="@(Count => Count > 0)"
					BackgroundColor="@Color.Error"
					Color="@Color.Fill">
						<FluentButton IconStart="@(new Icons.Filled.Size16.Alert())" Appearance="Appearance.Lightweight" OnClick="OpenUserNotificationPanel" />
					</FluentCounterBadge>
				</FluentStack>
			</FluentHeader>
			<FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
				<NavMenu />
				<FluentBodyContent Class="body-content">
					<div class="content">
						@Body
					</div>
				</FluentBodyContent>
			</FluentStack>

		</FluentLayout>
	</Authorized>
	<NotAuthorized>
		<p>Du er ikke logget på. <a href="authentication/login-callback">Logg på</a></p>
	</NotAuthorized>
</AuthorizeView>


<div id="blazor-error-ui" data-nosnippet>
	En megafeil har skjedd.
	<a href="." class="reload">Last på nytt</a>
	<span class="dismiss">🗙</span>
</div>

@code {

	private DotNetObjectReference<MainLayout>? dotNetHelper;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				UserNotificationManager.SomeThingChanged += SomethingHasChanged;
				dotNetHelper = DotNetObjectReference.Create(this);

				// Check if the device is iOS before registering the service worker
				var isIOS = await JSRuntime.InvokeAsync<bool>("isIOS");
				if (!isIOS)
				{
					await JSRuntime.InvokeVoidAsync("registerServiceWorkerMessageHandler", dotNetHelper);
				}
				else
				{
					Console.WriteLine("iOS detected. Service Worker handler not registered.");
				}
			}
			catch (Exception ex)
			{
				// ignored
			}
		}
	}

	public void Dispose()
	{

		UserNotificationManager.SomeThingChanged -= SomethingHasChanged;
	}


	private void SomethingHasChanged(object? sender, EventArgs e)
	{
		this.InvokeAsync(() => this.StateHasChanged());
	}

	private async Task OpenUserNotificationPanel()
	{
		var user = SessionManager.GetMyUserDto();

		var dialog = await DialogService.ShowPanelAsync<UserNotificationPanel>(user, new DialogParameters<UserDto>()
			{
				Content = user,
				Title = "Dine Varsler 🎉",
				Alignment = HorizontalAlignment.Right,
				PrimaryAction = "Lukk",
			  DismissTitle = "Lukk",
			   ShowDismiss = false,
			 SecondaryAction = null
			});

	}

}