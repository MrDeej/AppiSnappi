@* FamilyTimeline.razor *@
@using System.Collections.ObjectModel
@using FamilyApplication.AspireApp.Web.Components.FamilyEvents.Cards
@using FamilyApplication.AspireApp.Web.CosmosDb.Family
@using Microsoft.FluentUI.AspNetCore.Components

<div class="timeline-container">
    <div class="timeline-header">
        <h2>@Title</h2>
        @if (AllowAdd && AddEventCallback.HasDelegate)
        {
            <FluentButton Appearance="Appearance.Accent" @onclick="OpenAddDialog">Ny event</FluentButton>
        }
    </div>

    <div class="timeline" @ref="timelineRef">
        @foreach (var familyEvent in Events)
        {
            bool isMultiDay = familyEvent.Date.Date != familyEvent.EndDate.Date;
            string dateDisplay = isMultiDay
            ? $"{familyEvent.Date:MMMM dd, yyyy} - {familyEvent.EndDate:MMMM dd, yyyy}"
            : familyEvent.Date.ToString("MMMM dd, yyyy");

            <div class="timeline-date" id="event-@familyEvent.Id">
                <div class="date-marker">
                    @if (isMultiDay)
                    {
                        <div class="date-range">
                            <FluentLabel Typo="Typography.Subject">@familyEvent.Date.ToString("MMMM dd, yyyy")</FluentLabel>
                            <FluentLabel Typo="Typography.Subject" class="date-separator">to</FluentLabel>
                            <FluentLabel Typo="Typography.Subject">@familyEvent.EndDate.ToString("MMMM dd, yyyy")</FluentLabel>
                        </div>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Subject">@dateDisplay</FluentLabel>
                    }
                    @if (AllowEdit && EditEventCallback.HasDelegate)
                    {
                        <FluentButton Class="edit-button" Appearance="Appearance.Accent" @onclick="() => OpenEditDialog(familyEvent)" IconStart="@(new Icons.Filled.Size16.Edit())"></FluentButton>
                    }
                </div>
                <div class="event-container">
                    @switch (familyEvent.Type)
                    {
                        case FamilieEventType.Bursdag:
                            <BirthdayCard Event="familyEvent" />
                            break;
                        case FamilieEventType.EksternBursdag:
                            <ExternalBirthdayCard Event="familyEvent" />
                            break;
                        case FamilieEventType.Ferie:
                            <VacationCard Event="familyEvent" />
                            break;
                        case FamilieEventType.HjemmeEvent:
                            <HomeEventCard Event="familyEvent" />
                            break;
                        case FamilieEventType.UteEvent:
                            <OutsideEventCard Event="familyEvent" />
                            break;
                        case FamilieEventType.SkoleEvent:
                            <SchoolEventCard Event="familyEvent" />
                            break;
                        case FamilieEventType.HelligDag:
                            <HolidayCelebrationCard Event="familyEvent" />
                            break;
                        case FamilieEventType.LegeAvtale:
                            <MedicalAppointmentCard Event="familyEvent" />
                            break;
                        case FamilieEventType.ArbeidsEvent:
                            <WorkEventCard Event="familyEvent" />
                            break;
                        case FamilieEventType.Jubileum:
                            <AnniversaryCard Event="familyEvent" />
                            break;
                        default:
                            <FluentCard Class="default-card">
                                <div class="event-content">
                                    <h3>@familyEvent.Title</h3>
                                    <p><strong>@familyEvent.Time</strong> - @familyEvent.Description</p>
                                    @if (isMultiDay)
                                    {
                                        <p><em>Duration: @dateDisplay</em></p>
                                    }
                                </div>
                            </FluentCard>
                            break;
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public ObservableCollection<FamilyEvent> Events { get; set; } = new();

    [Parameter]
    public string Title { get; set; } = "Familie kalender";

    [Parameter]
    public bool AllowAdd { get; set; }

    [Parameter]
    public bool AllowEdit { get; set; }

    [Parameter]
    public bool AllowDelete { get; set; }

    [Parameter]
    public EventCallback<FamilyEvent> AddEventCallback { get; set; }

    [Parameter]
    public EventCallback<FamilyEvent> EditEventCallback { get; set; }

    [Parameter]
    public EventCallback<FamilyEvent> DeleteEventCallback { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    private FamilyEvent currentEvent = new();
    private ElementReference timelineRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var now = DateTime.Now;
            var targetEvent = Events
                .OrderBy(e => e.Date)
                .FirstOrDefault(e => e.Date.Date >= now.Date);

            if (targetEvent != null)
            {
                await JSRuntime.InvokeVoidAsync("scrollToElement", $"event-{targetEvent.Id}");
            }
        }
    }

    private async Task OpenAddDialog()
    {
        currentEvent = new FamilyEvent { Date = DateTime.Today, EndDate = DateTime.Today, Type = FamilieEventType.HjemmeEvent };
        var dialogParameters = new DialogParameters
            {
                Title = "Add Event",
                PrimaryAction = "Save",
                SecondaryAction = "Cancel",
                Width = "500px",
                Modal = true,
                TrapFocus = true
            };
        var dialogDto = new FamilyEventDialogDto()
            {
                FamilyEvent = currentEvent,
                AllowDelete = AllowDelete
            };
        var dialog = await DialogService.ShowDialogAsync<FamilyEventDialog>(dialogDto, dialogParameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (result.Data is FamilyEvent newEvent)
            {
                await AddEventCallback.InvokeAsync(newEvent);
            }
            else if (result.Data is string deleteSignal && deleteSignal == "delete")
            {
                // No action needed for add dialog delete, as it's a new event
            }
        }
    }

    private async Task OpenEditDialog(FamilyEvent familyEvent)
    {
        currentEvent = new FamilyEvent
            {
                Id = familyEvent.Id,
                Date = familyEvent.Date,
                EndDate = familyEvent.EndDate,
                Title = familyEvent.Title,
                Description = familyEvent.Description,
                Time = familyEvent.Time,
                Type = familyEvent.Type
            };

        var dialogParameters = new DialogParameters
            {
                Title = "Edit Event",
                PrimaryAction = "Save",
                SecondaryAction = "Cancel",
                Width = "500px",
                Modal = true,
                TrapFocus = true
            };

        var dialogDto = new FamilyEventDialogDto()
            {
                FamilyEvent = currentEvent,
                AllowDelete = AllowDelete
            };

        var dialog = await DialogService.ShowDialogAsync<FamilyEventDialog>(dialogDto, dialogParameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (result.Data is FamilyEvent updatedEvent)
            {
                await EditEventCallback.InvokeAsync(updatedEvent);
            }
            else if (result.Data is string deleteSignal && deleteSignal == "delete")
            {
                await DeleteEventCallback.InvokeAsync(familyEvent);
            }
        }
    }
}