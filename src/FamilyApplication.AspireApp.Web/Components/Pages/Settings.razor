@page "/settings"
@inject NavigationManager NavigationManager
<FluentCard>
    <FluentStack Orientation="Orientation.Vertical">
        <h2>Tema innstillinger</h2>
        <FluentSelect TOption="string" Value="@selectedPalette" Label="Velg Palett" ValueChanged="@((value) => { selectedPalette = value; OnPaletteChanged(value); })">
            @foreach (var palette in themeService._palettes.Keys.OrderBy(k => k))
            {
                <FluentOption TOption="string" Value="@palette">@palette</FluentOption>
            }
        </FluentSelect>

        @if (!string.IsNullOrEmpty(selectedPalette))
        {
            <FluentCard Style="@cardPreviewStyle">
                <h3>Forhåndsvisning: @selectedPalette</h3>
                <FluentLabel  Style="@accentLabelStyle">Accent Knapp</FluentLabel>
                <FluentLabel Style="@fillLabelStyle">Fyll Farge</FluentLabel>
                <FluentLabel Style="@neutralLabelStyle">Nøytral Bakgrunn</FluentLabel>
            </FluentCard>
        }

        <FluentButton  BackgroundColor="@previewAccent" OnClick="@ApplyPalette">Bruk Palett</FluentButton>
        <FluentButton Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Neutral" OnClick="@ResetColors">Tilbakestill Farger</FluentButton>

        @if (!string.IsNullOrEmpty(debugMessage))
        {
            <FluentLabel Style="color: var(--accent-fill-rest);">@debugMessage</FluentLabel>
        }
    </FluentStack>
</FluentCard>

@code {
    [Inject] private ThemeService themeService { get; set; } = default!;
    private string selectedPalette { get; set; } = "Sprø Banan";
    private string debugMessage = string.Empty;
    private string previewAccent = "";
    private string previewFill = "";
    private string previewNeutral = "";
    private string cardPreviewStyle => $"background-color: {previewNeutral}; margin-top: 1rem;";
    private string accentLabelStyle => $"background-color: {previewAccent}; padding: 0.5rem; margin-top: 0.5rem;";
    private string fillLabelStyle => $"background-color: {previewFill}; padding: 0.5rem; margin-top: 0.5rem;";
    private string neutralLabelStyle => $"background-color: {previewNeutral}; padding: 0.5rem; margin-top: 0.5rem;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            themeService.ThemeChanged += (s, e) => StateHasChanged();
            await themeService.LoadUserPreferences(false);
            selectedPalette = themeService.GetCurrentPaletteName();
            UpdatePreview(selectedPalette);
        }
    }

    private void OnPaletteChanged(string value)
    {
        if (value != null)
        {
            UpdatePreview(value);
        }
    }

    private void UpdatePreview(string paletteName)
    {
        if (themeService._palettes.ContainsKey(paletteName))
        {
            var colors = themeService._palettes[paletteName];
            previewAccent = colors.Accent;
            previewFill = colors.Fill;
            previewNeutral = colors.Neutral;
        }
        StateHasChanged();
    }

    private async Task ApplyPalette()
    {
        if (!string.IsNullOrEmpty(selectedPalette))
        {
            debugMessage = $"Bruker palett: {selectedPalette}";
            await themeService.ApplyPalette(selectedPalette);
            debugMessage = $"Palett brukt: {selectedPalette} (Accent: {themeService.AccentColor}, Fill: {themeService.FillColor}, Neutral: {themeService.NeutralBaseColor})";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: false);
            StateHasChanged();
        }
        else
        {
            debugMessage = "Ugyldig palett valgt";
            StateHasChanged();
        }
    }

    private async Task ResetColors()
    {
        debugMessage = "Tilbakestiller farger til standard";
        await themeService.ResetUserPreferences();
        debugMessage = "Farger tilbakestilt: Accent = #4CAF50, Fill = #C8E6C9, Neutral = #FFFFFF";
        selectedPalette = "Sprø Banan";
        UpdatePreview(selectedPalette);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: false);
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        UpdatePreview(selectedPalette);
    }

}