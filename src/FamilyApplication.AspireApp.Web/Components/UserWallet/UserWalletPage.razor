@page "/userwallet"
@using BlazorServerCommon.Extensions
@using Eiriklb.Utils
@using FamilyApplication.AspireApp.Web.Components.Shared
@using FamilyApplication.AspireApp.Web.Components.Todo
@using FamilyApplication.AspireApp.Web.Components.Users
@using FamilyApplication.AspireApp.Web.CosmosDb.Family
@using FamilyApplication.AspireApp.Web.CosmosDb.User
@using FamilyApplication.AspireApp.Web.Databuffer
@using FamilyApplication.AspireApp.Web.Sessions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.FluentUI.AspNetCore.Components
@using System.ComponentModel
@using System.Collections.Specialized
@inject NavigationManager NavigationManager
@inject GlobalVm GlobalVm
@inject IEiriklbDispatcher EiriklbDispatcher
@implements IDisposable
@inject IDialogService DialogService
@inject SessionManager SessionManager
@inject FamilyDtoDataService FamilyDtoDataService
@inject UserDtoDataService UserDtoDataService

<div class="page-content">
	<div class="wallet-header">
		@if (SessionManager.GetMyUserDto().UserType == UserType.Parent)
		{
			<div class="buttonSettings-wrapper">
				<FluentButton Id="btnSettings" Appearance="Appearance.Stealth" @onclick="@(() => _open = !_open)">
					<FluentIcon Value="@(new Icons.Regular.Size16.Settings())" />
				</FluentButton>
			</div>
			<FluentMenu Anchor="btnSettings" @bind-Open="_open" VerticalThreshold="170">
				<FluentMenuItem OnClick="@OpenAmountEditModal">
					Rediger saldo
				</FluentMenuItem>
			</FluentMenu>
		}
		<h3>@($"{_user?.FirstName ?? "missing user"}'s lommebok")</h3>
	</div>


	<div class="wallet-container">
		<div class="card money-visualizer-card">
			<div class="card-header">
				<div class="header-content">
					<h2>Saldo</h2>
					@if (_user is { Wallet: not null })
					{
						<span class="last-changed">@_user.Wallet.LastChangedAt.ToLocalTime().ToString("G")</span>
					}
				</div>
			</div>
			<div class="money-visualizer-container">
				@if (_user is { Wallet: not null })
				{
					<MoneyVisualizer Amount="@_user.Wallet.Amount" />
				}
			</div>
		</div>

		<div class="card transactions-card">
			<h2>Oppgaver til godkjenning</h2>

			@if (_user.TodosToApprove.Count > 0)
			{
				<div class="todo-list">

					@foreach (var todo in _user.TodosToApprove)
					{
						<TodoItem Todo="todo" OnTodoApproveRequest="@OnTodoApproveRequest" OnTodoDeleteRequest="@OnTodoDeleteRequest" OnTodoAddOrUpdateRequest="@OnTodoAddOrUpdateRequest" />

					}
				</div>

			}
			else
			{
				<div class="empty-todo-center">
					<LottiePlayer Src="lottie/lottieempty.json"
								  Style="border-radius: 50%"
								  Autoplay="true"
								  Width="96px"
								  Height="96px"
								  Speed="1" />

					<p>Ingen oppgaver å godkjenne</p>
				</div>
			}
		</div>

		<div class="card transactions-card">
			<div class="card-header">
				<div class="header-content">
					<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
					<LottiePlayer 
						Src="lottie/lottiepiggybankblue.json"
						Style="border-radius: 50%"
								  Autoplay="true"
								  Width="96px"
								  Height="96px"
								  Speed="1" />
					<h2>Sparemål</h2>
					<FluentSpacer/>
					<FluentButton @onclick="NewSaveGoal" IconStart="@(new Icons.Regular.Size16.Add())" />
					</FluentStack>
				</div>
			</div>
			<FluentTabs>
				@if(_userSaveGoalManager != null && _userSaveGoalManager.ActiveSaveGoals.Count > 0)
				{
					<FluentTab Label="Aktive">
						<div class="save-goals-list full-width">
								@foreach (var goal in _userSaveGoalManager.ActiveSaveGoals)
								{
									<div class="save-goal-item" @key="goal">
										<i class="fa fa-piggy-bank save-goal-icon"></i>
										<span class="save-goal-title" title="@goal.Description">@goal.ThingToSaveFor</span>
										<span class="save-goal-amount">@goal.Amount.ToString("C")</span>
										<FluentButton @onclick="() => EditSaveGoal(goal)" IconStart="@(new Icons.Regular.Size16.Edit())" />
									</div>
								}
						</div>
					</FluentTab>
				}
				@if(_userSaveGoalManager != null && _userSaveGoalManager.FinishedSaveGoals.Count > 0)
				{
					<FluentTab Label="Fullførte">
						<div class="save-goals-list full-width">
								@foreach (var goal in _userSaveGoalManager.FinishedSaveGoals)
								{
									<div class="save-goal-item" @key="goal">
										<i class="fa fa-piggy-bank save-goal-icon"></i>
										<span class="save-goal-title" title="@goal.Description">@goal.ThingToSaveFor</span>
										<span class="save-goal-amount">@goal.Amount.ToString("C")</span>
										<FluentButton @onclick="() => EditSaveGoal(goal)" IconStart="@(new Icons.Regular.Size16.Edit())" />
									</div>
								}
						</div>
					</FluentTab>
				}
			</FluentTabs>
		
		</div>

		<div class="card transactions-card">
			<div class="card-header">
				<div class="header-content">
					<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
					<LottiePlayer 
						Src="lottie/lottietransaction.json"
						Style="border-radius: 50%"
								  Autoplay="true"
								  Width="96px"
								  Height="96px"
								  Speed="1" />
					<h2>Transaksjoner</h2>
				</FluentStack>
				</div>
			</div>
			<FluentStack Orientation="Orientation.Vertical">
				@if (_user is { Wallet.Transactions: not null })
				{
					foreach (var transAction in _user.Wallet.Transactions.Take(20))
					{
						<div class="save-goal-item" @key="transAction.Id">

							<FluentLabel>@transAction.Reason</FluentLabel>
							<MoneyVisualizer Amount="@transAction.Amount" />
							<FluentLabel>@((DateTimeOffset.UtcNow - transAction.ChangedAt.DateTime).ToTimeAgo())</FluentLabel>


						</div>
					}
				}
			</FluentStack>
		</div>
	</div>
</div>




@code {
	private bool _open;
	private string? _optionalQueryUserId;
	private UserDto _user = default!;
	private FamilyDto? _familyDto;
	private LiveFilteringCollection<FamilyTodoDto>? _usersTodosToApprove;
	private UserSaveGoalManager? _userSaveGoalManager;


	private async Task OnTodoApproveRequest(FamilyTodoDto todo)
	{
		try
		{

			var myUser = SessionManager.GetMyUserDto();
			ArgumentNullException.ThrowIfNull(myUser.FamilyId);
			using var task = GlobalVm.AddTask("Legger til..");
			var token = task.GetToken();

			await UserDtoDataService.ApproveTodoToApprove(todo, _user.Id, myUser.Id, token);

		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}

	private async Task OnTodoDeleteRequest(FamilyTodoDto todo)
	{
		try
		{
			var myUser = SessionManager.GetMyUserDto();
			ArgumentNullException.ThrowIfNull(myUser.FamilyId);
			using var task = GlobalVm.AddTask("Sletter");
			var token = task.GetToken();


			await UserDtoDataService.DeleteTodoToApprove(todo.Id, _user.Id, token);

		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}

	private async Task OnTodoAddOrUpdateRequest(FamilyTodoDto todo)
	{
		try
		{
			var myUser = SessionManager.GetMyUserDto();
			ArgumentNullException.ThrowIfNull(myUser.FamilyId);
			using var task = GlobalVm.AddTask("Lagrer endringer..");
			var token = task.GetToken();


			await UserDtoDataService.UpdateTodoToApprove(todo, _user.Id, myUser.Id, token);

		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}



	protected override void OnInitialized()
	{
		try
		{
			var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
			if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out var userIds))
			{
				_optionalQueryUserId = userIds.FirstOrDefault();

				if (_optionalQueryUserId != null)
				{
					_user = GlobalVm.UserDtos.Single(a => a.Id == _optionalQueryUserId);
				}
			}

			//navigert uten userId, betyr at man vil se pålogget bruker.
			if (_optionalQueryUserId == null)
			{
				_user = SessionManager.GetMyUserDto();
			}
			ArgumentNullException.ThrowIfNull(_user);

			_userSaveGoalManager = new UserSaveGoalManager(_user);
			_userSaveGoalManager.SomeThingChanged += UserSaveGoalManagerSomethingChanged;

			_familyDto = GlobalVm.FamilyDtos.Single(a => a.FamilyId == _user.FamilyId);

			_user.PropertyChanged += UserhasChanged;
			_user.Wallet.PropertyChanged += WalletHasChanged;
			_user.TodosToApprove.CollectionChanged += TodosToApproveChanged;
		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}

	private async void UserSaveGoalManagerSomethingChanged(object? sender, EventArgs eventArgs)
	{
		await this.InvokeAsync(() => this.StateHasChanged());
	}

	private async void TodosToApproveChanged(object? o, NotifyCollectionChangedEventArgs eventArgs)
	{
		await this.InvokeAsync(() => StateHasChanged());
	}

	private void CallStateHasChanged(object? sender, EventArgs e)
	{
		StateHasChanged();
	}



	private async void UserhasChanged(object? sender, PropertyChangedEventArgs e)
	{
		if (e.PropertyName == nameof(UserDto.Wallet))
			await this.InvokeAsync(() => StateHasChanged());
	}

	private async void WalletHasChanged(object? sender, PropertyChangedEventArgs eventArgs)
	{
		await this.InvokeAsync(() => StateHasChanged());
	}

	private async void OpenAmountEditModal()
	{
		try

		{
			ArgumentNullException.ThrowIfNull(_user);
			// _amountEditModal.Open(_user);

			DialogParameters parameters = new()
				{
					Title = $"Rediger saldo for {_user.FirstName}",
					PrimaryAction = "Yes",
					PrimaryActionEnabled = false,
					SecondaryAction = "No",
					Width = "300px",
					TrapFocus = true,
					Modal = true,
					PreventScroll = true
				};

			var dto = new UserWalletEditBalanceOnUserDto()
				{
					NewBalance = _user.Wallet?.Amount ?? 0,
					OldBalance = _user.Wallet?.Amount ?? 0,
					User = _user
				};

			var dialog = await DialogService.ShowDialogAsync<UserWalletEditBalanceOnUser>(dto, parameters);
			var result = await dialog.Result;


			if (result is not { Data: UserWalletEditBalanceOnUserDto res, Cancelled: false })
				return;

			var myUser = SessionManager.GetMyUserDto();

			using var task = GlobalVm.AddTask("Endrer beløp");
			var token = task.GetToken();

			ArgumentNullException.ThrowIfNull(_user.Wallet);

			_user.Wallet.Amount = res.NewBalance;
			_user.Wallet.LastChangedAt = DateTime.UtcNow;
			_user.Wallet.LastChangeBy = myUser.Username;

			if (_user.Wallet.Transactions == null)
			{
				_user.Wallet.Transactions = new();
			}
			;

			_user.Wallet.Transactions.Insert(0, new UserWalletTransactions()
				{
					Amount = res.NewBalance - res.OldBalance,
					ChangeBy = SessionManager.GetMyUserDto().Id,
					ChangedAt = DateTimeOffset.UtcNow,
					Reason = res.Reason,
					Id = Guid.NewGuid().ToString()
				});



			await UserDtoDataService.Save(_user, token);
		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}


	#region savegoal
	private async void NewSaveGoal()
	{
		try

		{
			DialogParameters parameters = new()
				{
					Title = $"Rediger sparemål",
					PrimaryAction = "Lagre",
					PrimaryActionEnabled = true,
					SecondaryAction = "Avbryt",
					SecondaryActionEnabled = true,
					Width = "400px",
					TrapFocus = true,
					Modal = true,
					PreventScroll = true
				};


			var dto = new SaveGoalModalDto()
				{
					UserWalletSaveGoal = new()
					{
						CreatedAt = DateTime.Now,
						Id = Guid.NewGuid().ToString(),

					},
					IsNew = false
				};

			using var task = GlobalVm.AddTask("Lagrer sparemål");
			var token = task.GetToken();

			var dialog = await DialogService.ShowDialogAsync<SaveGoalModal>(dto, parameters);
			var result = await dialog.Result;


			if (result.Cancelled)
				return;

			var myUser = SessionManager.GetMyUserDto();

			_user.Wallet.SaveGoals ??= new();
			_user.Wallet.SaveGoals.Add(dto.UserWalletSaveGoal);
			_user.Wallet.LastChangedAt = DateTime.UtcNow;
			_user.Wallet.LastChangeBy = myUser.Id;


			await UserDtoDataService.Save(_user, token);
		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}

	private async void EditSaveGoal(UserWalletSaveGoal goal)
	{
		try
		{

			DialogParameters parameters = new()
				{
					Title = $"Rediger sparemål",
					PrimaryAction = "Lagre",
					PrimaryActionEnabled = true,
					SecondaryAction = "Avbryt",
					SecondaryActionEnabled = true,
					Width = "400px",
					TrapFocus = true,
					Modal = true,
					PreventScroll = true
				};

			var lc = new LiveCloneObject<UserWalletSaveGoal>(goal);

			var dto = new SaveGoalModalDto()
				{
					UserWalletSaveGoal = lc.TempObject,
					IsNew = false
				};

			using var task = GlobalVm.AddTask("Lagrer sparemål");
			var token = task.GetToken();

			var dialog = await DialogService.ShowDialogAsync<SaveGoalModal>(dto, parameters);
			var result = await dialog.Result;


			if (result.Cancelled || !lc.ErEndret)
				return;

			var myUser = SessionManager.GetMyUserDto();
			_user.Wallet.SaveGoals ??= new();

			var existing = _user.Wallet.SaveGoals.SingleOrDefault(a => a.Id == lc.TempObject.Id);
			if (existing != null)
				Eiriklb.Utils.ObjectSync.Instance.Update(existing, lc.TempObject);
			else
			{
				_user.Wallet.SaveGoals.Add(lc.TempObject);
			}

			await UserDtoDataService.Save(_user, token);



		}
		catch (Exception ex)
		{
			GlobalVm.AddException(ex);
		}
	}
	#endregion


	public void Dispose()
	{

		if (_user != null)
		{
			_user.PropertyChanged -= UserhasChanged;
			_user.Wallet.PropertyChanged -= WalletHasChanged;
			_user.TodosToApprove.CollectionChanged -= TodosToApproveChanged;
			_user = null;
		}
		if (_usersTodosToApprove != null)
		{
			_usersTodosToApprove.Dispose();
			_usersTodosToApprove.FilteredCollectionUpdated -= CallStateHasChanged;
			_usersTodosToApprove = null;
		}

		if (_userSaveGoalManager != null)
        {
            _userSaveGoalManager.SomeThingChanged -= UserSaveGoalManagerSomethingChanged;
            _userSaveGoalManager.Dispose();
            _userSaveGoalManager = null;
        }
	}


}

