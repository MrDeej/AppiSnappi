@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
<CascadingAuthenticationState>
    <FluentDesignSystemProvider AccentBaseColor="@themeService.AccentColor" FillColor="@themeService.FillColor" NeutralBaseColor="@themeService.NeutralBaseColor"  >
        <Router AppAssembly="typeof(Program).Assembly" OnNavigateAsync="HandleNavigation">
            <Found Context="routeData">
                <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
            </Found>
            <NotFound>
                <PageTitle>Not Found</PageTitle>
                <LayoutView Layout="typeof(Layout.NotLoggedInLayout)">
                    <p>Beklager, her har familien gått seg vill.</p>
                </LayoutView>
            </NotFound>
        </Router>
        <p style="color: var(--accent-fill-rest);">
            Debug: AccentColor = @themeService.AccentColor, FillColor = @themeService.FillColor, NeutralBaseColor = @themeService.NeutralBaseColor
        </p>
    </FluentDesignSystemProvider>
</CascadingAuthenticationState>
<FluentDialogProvider />
<FluentMenuProvider />
<FluentTooltipProvider />
<FluentToastProvider />

@code {
    [Inject] private ThemeService themeService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; } = default!;
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            await themeService.LoadUserPreferences();
            StateHasChanged();
            themeService.ThemeChanged += async (s, e) =>
            {
                Console.WriteLine($"Theme changed: AccentColor = {themeService.AccentColor}, FillColor = {themeService.FillColor}, NeutralBaseColor = {themeService.NeutralBaseColor}");
                var selectedTheme = themeService.ValgtPalett;
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                themeService.ValgtPalett = selectedTheme;
                StateHasChanged();
            };
        }
    }

    private async Task HandleNavigation(NavigationContext context)
    {
        if (context.Path == "")
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true || user.Identity?.Name != null)
            {
                NavigationManager.NavigateTo("/home", true);
            }
        }
    }
}