@using BlazorServerCommon.Extensions
@using FamilyApplication.AspireApp.Web.Components.Shared
@using FamilyApplication.AspireApp.Web.CosmosDb.User
@using Microsoft.FluentUI.AspNetCore.Components
@using System.ComponentModel
@inject SessionManager SessionManager
@implements IDisposable

<div style="margin-left:8px; margin-right:8px">
	<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2">
		@foreach (var row in ListSessions)
		{
			<FluentCounterBadge Count="@row.Count">
				<LottiePlayer Src="@row.UserDto.LottieProfile"
							  Width="20px"
							  Height="20px"
							  Style="border-radius: 50%"
							  Autoplay="true"
							  Speed="1" />

			</FluentCounterBadge>

			<FluentTooltip Anchor="@("lottieProfile" + row.UserDto.Id)"
						   Delay="300"
						   MaxWidth="400px"
						   Position="TooltipPosition.Bottom">@row.UserDto.Surname er aktiv innen @row.UserDto.LastActivity.ToTimeAgo()</FluentTooltip>
		}
	</FluentStack>
</div>
@code {
	private List<SessionViewerDto> ListSessions = new();
	private int Count = 0;


	protected override void OnInitialized()
	{
		SessionManager.SessionChanged += SessionChanged;
		Refresh();

	}

	public void Dispose()
	{

		SessionManager.SessionChanged -= SessionChanged;
	}

	private async void SessionChanged(object? o, EventArgs eventArgs)
	{
		await this.InvokeAsync(() => Refresh());

	}

	private void Refresh()
	{
		foreach (var rad in ListSessions)
			rad.UserDto.PropertyChanged -= UserDto_PropertyChanged;


		ListSessions = (from myrows in SessionManager.ActiveSessions
						group myrows by myrows.Value
						into grp
						select new SessionViewerDto()
							{
								UserDto = grp.Key,
								Count = grp.Count()
							}).ToList();

		foreach (var rad in ListSessions)
			rad.UserDto.PropertyChanged += UserDto_PropertyChanged;

		Count = ListSessions.Count;
		this.StateHasChanged();
	}

	private void UserDto_PropertyChanged(object? o, PropertyChangedEventArgs eventArgs)
	{
		if (eventArgs.PropertyName is nameof(UserDto.LottieProfile)
	or nameof(UserDto.LastActivity))
			this.InvokeAsync(() => this.StateHasChanged());
	}

}
